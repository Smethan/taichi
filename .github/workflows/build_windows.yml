name: Manual Build
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Manually trigger the release workflow, a version must be provided
    inputs:
      version:
        description: 'The version to release (e.g. v0.8.0), or leave it empty for nightly build'
        type: string
        required: false

env:
  RELEASE_VERSION: ${{ github.event.inputs.version }}
  TI_CI: 1

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_osx: ${{ steps.set-matrix.outputs.matrix_osx }}
    steps:
      - id: set-matrix
        run: |
          if [ -n "$RELEASE_VERSION" ]; then
            # For production release, we run on five python versions.
            echo '::set-output name=matrix::{"include":[{"name":"taichi","python":"3.6","conda_python":"py36"},{"name":"taichi","python":"3.7","conda_python":"py37"},{"name":"taichi","python":"3.8","conda_python":"py38"},{"name":"taichi","python":"3.9","conda_python":"py39"},{"name":"taichi","python":"3.10","conda_python":"py310"}]}"'
            # M1 only supports py38, py39, and py310(conda), so change matrix.
            echo '::set-output name=matrix_osx::{"include":[{"name":"taichi","python":"3.8"},{"name":"taichi","python":"3.9"},{"name":"taichi","python":"3.10"}]}"'
          else
            # For nightly release, we run on three python versions.
            echo '::set-output name=matrix::{"include":[{"name":"taichi-nightly","python":"3.10","conda_python":"py310"}]}"'
            # M1 only supports py38 and py310(conda), so change matrix.
            echo '::set-output name=matrix_osx::{"include":[{"name":"taichi-nightly","python":"3.8"},{"name":"taichi-nightly","python":"3.10"}]}"'
          fi


  build_and_test_windows:
      name: Build and Upload (Windows only)
      needs: matrix_prep
      strategy:
        fail-fast: false
        matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v2
          with:
            submodules: 'recursive'

        - uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python }}

        - name: Add Visual Studio Shell to ENV
          uses: egor-tensin/vs-shell@v2
          with:
            arch: x64

        - name: Get sccache cache
          uses: actions/cache@v2
          with:
            path: ccache_cache
            key: ccache-win64-clang-${{ github.sha }}
            restore-keys: |
              ccache-win64-clang-
        - name: Build Python Wheel
          shell: powershell
          run: |
            .\.github\workflows\scripts\win_build.ps1 -installVulkan
          env:
            PROJECT_NAME: ${{ matrix.name }}

        - name: Archive Wheel Artifacts
          uses: actions/upload-artifact@v2
          with:
            name: dist
            path: dist/*.whl
            retention-days: 20
